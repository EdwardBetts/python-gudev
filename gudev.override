%%
headers
#include <Python.h>
#define G_UDEV_API_IS_SUBJECT_TO_CHANGE
#include <gudev/gudev.h>
#include "pygobject.h"

/* Helper functions from gnome-python (gtksourceview) */
static PyObject *
_gslist_to_pylist_objs (const GSList *source)
{
    const GSList *iter;
    PyObject *dest = PyList_New (0);
    for (iter = source; iter != NULL; iter = iter->next)
    {
        PyObject *item = pygobject_new ((GObject *)iter->data);
        PyList_Append (dest, item);
        Py_DECREF (item);
    }
    return dest;
}

static PyObject *
_gslist_to_pylist_strs (const GSList *source)
{
    const GSList *iter;
    PyObject *dest = PyList_New (0);
    for (iter = source; iter != NULL; iter = iter->next)
    {
        PyObject *item = PyString_FromString ((char *)iter->data);
        PyList_Append (dest, item);
        Py_DECREF (item);
    }
    return dest;
}

/* Helper function from pygobject (pygio-utils) */
static gboolean
_pylist_to_strv (PyObject *list, char ***strvp)
{
    int i, len;
    char **ret;

    *strvp = NULL;

    if (list == Py_None)
        return TRUE;

    if (!PySequence_Check (list))
    {
        PyErr_Format (PyExc_TypeError, "argument must be a list or tuple of strings");
        return FALSE;
    }

    if ((len = PySequence_Size (list)) < 0)
        return FALSE;

    ret = g_new (char*, len + 1);
    for (i = 0; i <= len; ++i)
        ret[i] = NULL;

    for (i = 0; i < len; ++i)
    {
        PyObject *item = PySequence_GetItem (list, i);

        if (!item)
        {
            g_strfreev (ret);
            return FALSE;
        }

        if (!PyString_Check (item))
        {
            Py_DECREF (item);
            g_strfreev (ret);
            PyErr_Format (PyExc_TypeError, "argument must be a list of strings");
            return FALSE;
        }

        ret[i] = g_strdup (PyString_AsString (item));
        Py_DECREF (item);
    }

    *strvp = ret;
    return TRUE;
}

%%
modulename gudev
%%
import gobject.GObject as PyGObject_Type
%%
ignore-glob
	*_get_type
%%
new-constructor G_UDEV_TYPE_CLIENT
%%
override g_udev_client_new
static int
_wrap_g_udev_client_new(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "subsystems", NULL };
    gchar **subsystems = NULL;
    PyObject *list;
    GUdevClient *client = NULL;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs,
                                        "O:GUdevClient.__init__",
                                        kwlist,
                                        &list))
        return -1;

    if (!_pylist_to_strv(list, &subsystems)) {
        PyErr_SetString(PyExc_RuntimeError, "could not convert list");
        return -1;
    }
        
    pygobject_construct(self, "subsystems", subsystems, NULL);

    if (!self->obj) {
        PyErr_SetString(PyExc_RuntimeError, "could not create GUdevClient");
        return -1;
    }
    return 0;
}
%%
override g_udev_client_query_by_subsystem
static PyObject *
_wrap_g_udev_client_query_by_subsystem(PyGObject *self, PyObject *args, PyObject *kwargs)
{
    static char *kwlist[] = { "subsystem", NULL };
    gchar *subsystem = NULL;
    GSList *source;
    PyObject *dest;

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, "s:GUdevClient.query_by_subsystem",
                                     kwlist, &subsystem))
        return NULL;

    source = g_udev_client_query_by_subsystem(G_UDEV_CLIENT(self->obj), subsystem);
    dest = _gslist_to_pylist_objs(source);
    g_slist_free(source);
    return dest;
}
%%
// vim: filetype=c
